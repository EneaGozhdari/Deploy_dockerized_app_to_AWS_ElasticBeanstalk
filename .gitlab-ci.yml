stages:
    - build
    - package
    - dockertest
    - test
    - deploy

variables:
    APP_VERSION: $CI_PIPELINE_IID
    
build website:
    image: node:16.16-alpine
    stage: build
    tags:
        - "enea-runner"
    script:
        - yarn install
        - yarn lint
        - yarn test
        - yarn build
        - echo $APP_VERSION > build/version.html
    artifacts:
        paths:
            - build

docker image:
  tags:
    - "enea-runner"
  stage: package
  image: docker:20.10.17
  services:
    - docker:20.10.17-dind
  variables:
        DOCKER_HOST: tcp://docker:2376
        DOCKER_TLS_CERTDIR: /certs
        DOCKER_TLS_VERIFY: 1
        DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  before_script:
    - chmod u+x wait.sh && ./wait.sh
    - docker info
    - docker login -u "$DOCKER_USER" -p "$DOCKER_PASSWORD" 
  script:
    - docker build . -t $DOCKER_PRIVATE_REGISTRY:staging -t registry.gitlab.com/my-registry/ci-cd/enea:latest -t $CI_REGISTRY_IMAGE:$APP_VERSION
    - docker image
    - docker login -u "$DOCKER_USER" -p "$DOCKERHUB_TOKEN"
    - docker push $DOCKER_PRIVATE_REGISTRY:staging
    - docker login $CI_REGISTRY -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
    - docker push $CI_REGISTRY_IMAGE:latest 
    - docker push $CI_REGISTRY_IMAGE:$APP_VERSION
    - docker pull gozhdaeg/cicdenea:staging
    - docker tag gozhdaeg/cicdenea:staging gozhdaeg/cicdenea:latest

test docker:
  tags:
    - "enea-runner"
  stage: test
  image: curlimages/curl
  services:
    - name: $CI_REGISTRY_IMAGE:latest
      alias: website
  script:
    - curl http://website/version.html | grep $APP_VERSION

deploy to prod:
  tags:
    - "enea-runner"
  image:
    name: amazon/aws-cli:2.4.11
    entrypoint: [""]
  stage: deploy
  variables:
    APP_NAME: elasticbeanstalk-app-sample
    APP_ENV_NAME: aws-eb-env
  environment: PROD
  script:
    - aws --version
    - yum install -y gettext
    - export DEPLOY_TOKEN=$(echo $GITLAB_DEPLOY_TOKEN | tr -d "\n" | base64)
    - envsubst < templates/Dockerrun.aws.json > Dockerrun.aws.json
    - envsubst < templates/auth.json > auth.json
    - cat Dockerrun.aws.json
    - cat auth.json
    - aws s3 cp Dockerrun.aws.json s3://$AWS_BUCKET/Dockerrun.aws.json
    - aws s3 cp auth.json s3://$AWS_BUCKET/auth.json
    - aws elasticbeanstalk create-application-version --application-name "$APP_NAME" --version-label $APP_VERSION --source-bundle S3Bucket=$AWS_BUCKET,S3Key=Dockerrun.aws.json
    - aws elasticbeanstalk update-environment --application-name "$APP_NAME" --version-label $APP_VERSION --environment-name $APP_ENV_NAME
